### =========== Theory Assignment ===========


Question 1: Explain CSS Grid and how it differs from Flexbox. When would you use Grid over
Flexbox?

--> 

    CSS Grid
    --------

    - CSS Grid is layout system in CSS that allow you to design webpages using two-dimensional Grid.
    - It enables you to position elements in rows and columns, making it ideal for creating complex layouts.


    key features:
    -------------

    - Two-dimensional Layout : you can control both rows and columns simultaneously 
    - Explict Grid System : you can define grid using properties like grid-template-columns, grid-template-rows
    grid-gap etc
    - Item positioning : items can be placed using grid lines,identified by numbers or names
    - Automatic placement : Items are automatically placed into grid if you don't specify their positions

    Example :
    ---------

    .container {

        display: grid;
        grid-template-columns: 1fr 2fr;
        grid-template-rows: auto 100px;
        gap: 10px;

    }

    .item1 {

        grid-column: 1 / 3; /* Spans across both columns */
        grid-row: 1;        /* Occupies the first row */

    }

    CSS flexbox
    -----------

    - CSS flexbox is layout system in CSS that allow you to design webpages using one-dimensional flexbox
    - It enables you to position elements in either row or column 

    key features :
    --------------

    - One-dimensional layout : you can control either row or column 
    - Flexibility : Items can grow,shrink or space themeselves dynamically based on available space
    - Alignment : alignment options like justify-content and align-items

    Example :
    ---------

    .container {

        display: flex;
        justify-content: space-between;
        align-items: center;

    }

    .item {

        flex: 1; /* Each item takes equal space */

    }



    Differences between Grid and flexbox :
    --------------------------------------

    Feature                     CSS Grid                    Flexbox
    -------                     --------                    -------

    Layout type                 Two-dimensional             One-dimensional

    Use Case                    Complex,Grid based          Linear alignment
                                Layout                      of items

    Control                     Explicit positioning        Dynamic distribution
                                of items                    of items

    Flexibility                 less flexible for           Highly flexible
                                resizing

    
    When to Use Grid Over Flexbox:
    ------------------------------

    1. complex layout : Use Grid for layout that involve rows and columns 
    2. Precise placement : when you need items placed exactly at specific grid position
    3. Consistency : Use grid for layout where you want consistent spacing and alignment across rows 
    and colummns

    When to Use Flexbox:
    --------------------

    1. Simple Layouts: Use Flexbox for a single row or column of items (e.g., navigation bars, toolbars).
    2. Dynamic Distribution: When items need to adjust size and spacing dynamically based on content or
    available space.
    3. Alignment: For centering or aligning items along a single axis.

    
Question 2: Describe the grid-template-columns, grid-template-rows, and grid-gap
properties. Provide examples of how to use them.

-->

    1. Grid-template-columns

    - This property defines the width of columns in a grid layout
    - you specify the size of each column , and CSS grid will create them accordingly.

    Values :
    --------
            - Fixed value(px,em,...) : grid-template-columns : 100px 200px;
            - Fractional units(fr) : grid-template-columns : 1fr 2fr;
            - Auto sizing : grid-template-columns : auto auto;
            - Repeat function : repeat(3,1fr) ;
            - other values like minmax(),min-content(),max-content(),fit-content() etc.


    Example:
    --------

    .container {

        display: grid;
        grid-template-columns: 100px 200px 1fr;

    }         

    Result : The first column is 100px wide, the 2nd column is 200px wide, the 3rd column takes the available space
    --------


    2. Grid-template-rows

    - This property defines the height of rows in a grid layout

    Values :
    --------
            - Fixed value(px,em,...) : grid-template-rows : 100px 200px;
            - Fractional units(fr) : grid-template-rows : 1fr 2fr;
            - Auto sizing : grid-template-rows : auto auto;
            - Repeat function : repeat(3,1fr) ;
            - other values like minmax(),min-content(),max-content(),fit-content() etc.


    Example:
    --------

    .container {

        display: grid;
        grid-template-rows: 100px 200px 1fr;

    }         

    Result : The first row is 100px tall, the 2nd row is 200px tall, the 3rd row takes the available space
    --------

    3. gap ( or grid-gap )

    - this property specifies the spacing between rows and columns in a grid layout 
    - it's shorthand of row-gap and column-gap 

    Values :
    --------
            - single value : gap : 10px; ( applies same value to both rows and columns ) 
            - two value : gap : 10px 20px ( first for rows and second for columns  )

    Example:
    --------

    .container {

        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(2, 100px);
        gap: 20px;

    }  

    Result: A grid with 3 columns (equal width) and 2 rows (100px height each), with 20px spacing between 
    ------- rows and columns.
      